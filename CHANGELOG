0.1.4:
* Fix for cases where rack reports the CORS origin header as HTTP_ORIGIN

0.1.3:
* Adds support for CORS - see: https://github.com/markrebec/excursion/pull/5
* Adds Excursion::Pool.secret_key_base to generate and share a secret token across your applications using excursion

0.1.2:
* Fixes bugs with the test datastore not properly returning dummy applications

0.1.1:
* Adds support for storing underscore-prefixed keys to track internal settings and flags (like _pool_updated)
* Now tracking when the pool was last updated and refreshing the local cache when necessary. This means that if one application's routes are updated, you no longer need to restart the other applications to pick up the latest changes.

0.1.0:
* Prepends the current protocol onto javascript url helpers
* Bumps to a 0.1.0 release

0.0.20:
* Fix: prevents registering apps on init (if enabled) when initializing within a rake task

0.0.19:
* Checks for nil values before setting applications in the pool

0.0.18:
* Fixes and cleanup for Excursion::Pool.all_applications and javascript helpers

0.0.17:
* Actually includes the app/ path and javascript files in the gem (duh)

0.0.16:
* Moves rails engine into it's own file for proper inclusion

0.0.15:
* Version bump from bad 0.0.14 release

0.0.14:
* Renames the :cache option to :store for Excursion::Pool.register_application

0.0.13:
* Adds the ability to register a raw hash with Excursion::Pool.register_hash
* Allows passing a block to Excursion::Pool.register_application and using the new DSL to create or modify your application

0.0.12:
* Adds support for _path helpers
* Adds #all and #all_apps methods to datastores to fetch all registered keys/applications
* Tracks an index of registered keys for the memcache datastore (to enable the new #all methods)
* Adds Excursion::Pool.all_applications to return all registered applications
* Excursion is now registered as a rails engine to plug into the asset pipeline
* New (prototype) javascript url helpers to provide access to your application routes in the client with Excursion.application.your_named_url()
* Helper method render_excursion_javascript_helpers to handle loading the javascript route helpers into your views

0.0.11:
* Bugfixes for dummy applications not being properly configured and returned in certain test cases

0.0.10:
* Add support for configuring test_providers to exercise more control over the :test datastore and DummyApplications in client specs

0.0.9:
* Adding [] and has_key? support methods to the DummyApplication class

0.0.8:
* Added a DummyApplication object which will respond to non-existent url helper calls with a predicatable dummy route
* Added a :test datastore that can be used for testing, which responds with a DummyApplication when the requested application does not exist
* Refactored UrlHelpers to check whether the route exists in the app, rather than regext matching against all defined routes (this allows the :test datastore and DummyApplicaiton to respond when things don't actually exist)

0.0.7:
* Refactored url helpers a bit to use our own custom path part replacement (which still doesn't support format) and make uniform calls to the base url_for helper method for all Rails versions
* Url helpers now accept additional options (like host information) which get merged with the appliaction's default url options stored in the route pool

0.0.6:
* Added two new datastores - :active_record and :active_record_with_memcache
* Added a model and generator for the migration to support the new active record datastores
* Initial support for Rails 3 - the major caveat right now is that :format is not supported at all (and is stripped entirely from the generated url)

0.0.5:
* BREAKING CHANGE: Renamed datasources -> datastores. Didn't think it was worth adding transitional config vars since I'm the only one using this right now.
* Adding specs
* Start working on rails 3 compatibility (one outstanding issue: https://github.com/markrebec/excursion/issues/1)

0.0.4:
* Properly namespacing keys when using the :memcache datasource

0.0.3:
* Ability to remove an app from the pool
* Rake task to remove the running app from the pool
* Config option :register_app (defaults to true) to control whether the railtie registers the app on init, allowing you to "disable" excursion but still use helpers from other apps.

0.0.2:
* Added support for :memcache datasource - requires the dalli gem.
* Refactored helpers, sharing helpers between instances, global helpers available at Excursion.url_helpers.
* Custom error classes, improved exception raising/handling

0.0.1:
* Initial working prototype. Only supports the file datasource.
